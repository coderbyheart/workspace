#!/bin/bash

STEP=${1:-PATCH}

MAX_MAJOR=`git tag | awk '{ print substr($1, 2, 1)}' | sort -h | uniq | tail -n 1`
MAX_MINOR=`git tag | grep -E ^v$MAX_MAJOR\. | awk -F \. '{ print $2; }' | sort -h | tail -n 1`
MAX_PATCH=`git tag | grep -E ^v$MAX_MAJOR\.$MAX_MINOR\. | awk -F \. '{ print $3; }' | sort -h | tail -n 1`
LAST_VER="$MAX_MAJOR.$MAX_MINOR.$MAX_PATCH"

case $STEP in
MAJOR)
  NEXT_VER="`(expr $MAX_MAJOR + 1)`.$MAX_MINOR.$MAX_PATCH"
  ;;
MINOR)
  NEXT_VER="$MAX_MAJOR.`(expr $MAX_MINOR + 1)`.$MAX_PATCH"
  ;;
*)
  NEXT_VER="$MAX_MAJOR.$MAX_MINOR.`(expr $MAX_PATCH + 1)`"
  ;;
esac

LOG=`git log --pretty=format:" - %s (%H)" v$LAST_VER..HEAD`
echo $LOG
if [ -f "package.json" ]; then
    sed -i -r -e "s/\"version\":\W+\"[^\"]+\"/\"version\": \"$NEXT_VER\"/" package.json
    git diff
fi
read -p "Update from v$LAST_VER to v$NEXT_VER? " -n 1 -r
if [[ $REPLY =~ ^[Yy]$ ]]
then
    echo ""
    if [ -f "package.json" ]; then
        git add package.json
        git commit -m "Tagging release v$NEXT_VER."
    fi
    echo $LOG | git tag v$NEXT_VER -s --file -
    git tag -v v$NEXT_VER
    git push origin v$NEXT_VER
else
    if [ -f "package.json" ]; then
        git checkout -- package.json
    fi
fi
