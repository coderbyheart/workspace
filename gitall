#!/usr/bin/env node

const { spawn } = require("child_process");
const fs = require("fs").promises;
const os = require("os");
const path = require("path");
const chalk = require("chalk");

const byFilterArg = (match) => {
  if (match === undefined) return () => true;
  return (s) =>
    match
      .split(" ")
      .map((s) => s.trim())
      .reduce((matches, m) => matches || s.includes(m), false);
};

const run = async (cmd, cwd = process.cwd(), progress = false) =>
  new Promise((resolve, reject) => {
    const [command, ...args] = cmd;
    const p = spawn(command, args, { cwd });
    const result = [];
    const errors = [];
    p.on("close", (code) => {
      if (code !== 0) {
        return reject(
          new Error(
            `${command} ${args && args.join(" ")} failed: ${errors.join(
              os.EOL
            )}`
          )
        );
      }
      return resolve(result.join(os.EOL));
    });
    p.stdout.on("data", (data) => {
      result.push(data);
      if (data && progress) {
        data
          .toString()
          .split(os.EOL)
          .forEach((l) => {
            console.log(progress, l);
          });
      }
    });
    p.stderr.on("data", (data) => {
      errors.push(data);
    });
  });

const gitall = async (cmd) => {
  const folders = (await run(["ls", "-1"])).split(os.EOL).filter((f) => f);

  const gitFolders = (
    await Promise.all(
      folders.filter(byFilterArg(process.env.REPO_FILTER)).map((folder) =>
        fs
          .stat(path.resolve(process.cwd(), folder, ".git"))
          .then(() => ({ folder, isGit: true }))
          .catch(() => ({ folder, isGit: false }))
      )
    )
  ).filter(({ isGit }) => isGit);

  let ignored = [];
  try {
    ignored = (
      await fs.readFile(path.join(process.cwd(), ".gitallignore"), "utf-8")
    )
      .trim()
      .split("\n")
      .map((s) => s.trim());
  } catch {}

  ignored.push(
    ...folders.filter((s) => !byFilterArg(process.env.REPO_FILTER)(s))
  );

  ignored.forEach((folder) => {
    console.log(chalk.magenta(`[${folder}]`), chalk.grey("Ignored"));
  });

  const branches = new Map();
  const changes = new Map();

  await Promise.all(
    gitFolders
      .filter(({ folder }) => !ignored.includes(folder))
      .map(async ({ folder }) => {
        const wd = path.resolve(process.cwd(), folder);
        const [branch, hasChanges] = await Promise.all([
          run(["git", "rev-parse", "--abbrev-ref", "HEAD"], wd),
          run(["git", "status", "--porcelain"], wd),
        ]);
        branches.set(folder, branch.trim());
        changes.set(folder, hasChanges.trim().length > 0);
      })
  );

  const label = (folder) => {
    const l = [];
    if (changes.get(folder)) l.push(chalk.green(" *"));
    l.push(
      chalk.magenta(folder),
      chalk.grey("@"),
      chalk.blueBright(branches.get(folder)),
      chalk.grey(">")
    );
    return l;
  };

  const res = await Promise.all(
    gitFolders
      .filter(({ folder }) => !ignored.includes(folder))
      .map(async ({ folder }) => {
        const wd = path.resolve(process.cwd(), folder);
        console.log(...label(folder), chalk.yellow(wd));
        try {
          await run(cmd, wd, label(folder).join(" "));
          return { success: true, folder };
        } catch (error) {
          return { success: false, error, folder };
        }
      })
  );

  res.forEach(({ success, error, folder }) => {
    if (success) {
      console.log(...label(folder), chalk.greenBright("OK"));
    } else {
      console.error(...label(folder), chalk.red(error));
    }
  });
};

const [, , ...cmd] = process.argv;

gitall(cmd);
